1. Day 1: Starting up the Project:

	- Symfony2 installation :

		http://localhost/symfony_jobeet/web/app_dev.php -> check installation
		http://localhost/symfony_jobeet/web/config.php -> check system requirements

	- Creating the Application Bundle :

		php app/console generate:bundle --namespace=Ens/JobeetBundle --format=yml

	- Clear the cache after generating the new bundle with:

		php app/console cache:clear --env=prod
		php app/console cache:clear --env=dev

2. Day 2: The Project

3. Day 3: The Data Model

	- Database configuration:

		app/config/parameters.yml

	- Create the database:

		php app/console doctrine:database:create

	- Create table schema:

		schema files:
			src/Ens/JobeetBundle/Resources/config/doctrine/Category.orm.yml
			src/Ens/JobeetBundle/Resources/config/doctrine/Job.orm.yml
			src/Ens/JobeetBundle/Resources/config/doctrine/Affiliate.orm.yml
			src/Ens/JobeetBundle/Resources/config/doctrine/CategoryAffiliate.orm.yml

		create Entity files:
			php app/console doctrine:generate:entities EnsJobeetBundle
			=> will create Entity/Model files on src/Ens/JobeetBundle/Entity :
			   - Affiliate.php
			   - Category.php
			   - CategoryAffiliate.php
			   - Job.php

	 	create the tables:
	 		php app/console doctrine:schema:update --force

	- Installing Doctrine Fixtures Bundle (for initial data):

		- get the "require" text from 'https://packagist.org/packages/doctrine/doctrine-fixtures-bundle'
		- add it to "require" section of the "composer.json"
		- run "composer update" command
		- add 'new Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle()' to $bundles array of 'app/AppKernel.php'
		- create new folder 'src/Ens/JobeetBundle/DataFixtures/ORM'
		- create file fixtures: 'src/Ens/JobeetBundle/DataFixtures/ORM/LoadCategoryData.php', 'src/Ens/JobeetBundle/DataFixtures/ORM/LoadJobData.php'
		- load the fixtures with 'php app/console doctrine:fixtures:load' command

	- Generate CRUD files:

		php app/console doctrine:generate:crud --entity=EnsJobeetBundle:Job --route-prefix=ens_job --with-write --format=yml
			=> This will create a new controller 'src/Ens/JobeetBundle/Controllers/JobController.php' and a new route file in 'src/Ens/JobeetBundle/Recources/config/routing/job.yml'

		import the routing config from 'src/Ens/JobeetBundle/Recources/config/routing/job.yml' to 'Ens/JobeetByndle/Resources/config/routing.yml':

			EnsJobeetBundle_job:
	    	    resource: "@EnsJobeetBundle/Resources/config/routing/job.yml"
	    	    prefix: /job

    	test the routing:

    		http://localhost/symfony_jobeet/web/app_dev.php/job/

4. Day 4: The Controller and the View:

	- Render e template and pass values:

		return $this->render('EnsJobeetBundle:Job:index.html.twig', array(
            'entities' => $entities,
        ));

	- Create layout:

		'src/Ens/JobeetBundle/Resources/views/layout.html.twig'

	- Assets:

		- images: 'src/Ens/JobeetBundle/Resources/public/images/'
		- css: 'src/Ens/JobeetBundle/Resources/public/css/'

		tell Symfony to make them available to the public:

		'php app/console assets:install web'

	- Twig syntax:

		- {% extends 'EnsJobeetBundle::layout.html.twig' %} -> use 'layout.html.twig'
		- {% block title %} {% endblock %} -> create block
		- {{ parent() }} -> call parent content
		- {{ asset('bundles/ensjobeet/css/job.css') }} -> use app assets

5. Day 5: The Routing:

	- Routing files:

		- 'app/config/routing.yml' -> global routing config
		- 'src/Ens/JobeetBundle/Resources/config/routing.yml' -> bundle routing coinfig

	- Import routing file:

		EnsJobeetBundle:
    		resource: "@EnsJobeetBundle/Resources/config/routing.yml" -> import routing config from 'src/Ens/JobeetBundle/Resources/config/routing.yml'
    		prefix:   /

	- Routing syntax:

		ens_job: -> routing name
		    pattern:  / -> URL
		    defaults: { _controller: "EnsJobeetBundle:Job:index" } -> controller and action to route

		ens_job_create:
		    pattern:  /create
		    defaults: { _controller: "EnsJobeetBundle:Job:create" }
		    requirements: { _method: post } -> route requirement (define HTTP method to expect)

		ens_job_show:
		    pattern:  /{company}/{location}/{id}/{position}
		    defaults: { _controller: "EnsJobeetBundle:Job:show" }
		    requirements:
		        id:  \d+ -> route requirement (id must be a number)

    - Custom library to 'slugify' the URL:

    	'Utils/Jobeet.php'

    - Debug app route:

    	- php app/console router:debug -> debug all app route
    	- php app/console router:debug ens_job_show -> debug a particular route

6. Day 6: More with the Model:

	- get active jobs only:

		- add new 'setExpiresAtValue' to 'prePersist' life cycle callback to 'src/Ens/JobeetBundle/Resources/config/doctrine/Job.orm.yml'

			lifecycleCallbacks:
				prePersist: [ setCreatedAtValue, setExpiresAtValue ]
			    preUpdate: [ setUpdatedAtValue ]

		- rebuild the entities: 
			php app/console doctrine:generate:entities EnsJobeetBundle

	    - create the 'setExpiresAtValue' method to 'src/Ens/JobeetBundle/Entity/Job.php'

	    - add new data fixtures to 'src/Ens/JobeetBundle/DataFixtures/ORM/LoadJobData.php'

	    - reload the fixtures:
	    	php app/console doctrine:fixtures:load

	   	- create a custom repository class for Job entity. edit '/src/Ens/JobeetBundle/Resources/config/doctrine/Job.orm.yml', 
	   	  and add 'repositoryClass' configuration to register the custom repository

			Ens\JobeetBundle\Entity\Job:
			  type: entity
			  repositoryClass: Ens\JobeetBundle\Repository\JobRepository

		- rebuild the entities:
			php app/console doctrine:generate:entities EnsJobeetBundle
			will create => 'src/Ens/JobeetBundle/Repository/JobRepository.php'

		- add 'getActiveJobs' method to 'src/Ens/JobeetBundle/Repository/JobRepository.php'

		- use the custom repository:
			# src/JobeetBundle/Controller/JobController.php, indexAction()
			$entities = $em->getRepository('EnsJobeetBundle:Job')->getActiveJobs();

	- display jobs with category:

		- create a custom repository class for Category entity. edit '/src/Ens/JobeetBundle/Resources/config/doctrine/Category.orm.yml', 
	   	  and add 'repositoryClass' configuration to register the custom repository

			Ens\JobeetBundle\Entity\Category:
			  type: entity
			  repositoryClass: Ens\JobeetBundle\Repository\CategoryRepository

		- rebuild the entities:
			php app/console doctrine:generate:entities EnsJobeetBundle
			will create => 'src/Ens/JobeetBundle/Repository/CategoryRepository.php'

		- add 'getWithJobs' method to 'src/Ens/JobeetBundle/Repository/CategoryRepository.php'

		- add a new property and methods to Category entity class: 
			private $active_jobs, setActiveJobs(), getActiveJobs()

		- modify 'src/Ens/JobeetBundle/Resources/views/Job/index.html.twig' to display jobs with category

		- create custom configuration in 'app/config/config.yml' to set the result limit:
			parameters:
    			max_jobs_on_homepage: 10

    	- modify JobController indexAction() to load jobs with category

    - don't show expired jobs on JobController showAction():

    	- add 'getActiveJob' method to 'src/Ens/JobeetBundle/Repository/JobRepository.php'

    	- change the showAction from the JobController to use the new repository method:
    		$entity = $em->getRepository('EnsJobeetBundle:Job')->getActiveJob($id)


	

	


